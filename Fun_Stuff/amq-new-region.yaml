---
AWSTemplateFormatVersion: 2010-09-09

# A CloudFormation template to create/configure an ActiveMQ setup based on parameters,
# along with an associated security group and subnet group.
#
# There will be an autocreation of the ActiveMQ username and password which will
# be stored as a secret in SecretsManager and used in the ActiveMQ setup

Description: Nextworld ActiveMQ With Dependencies Throughput Optimized (requires VPC)

Parameters:

  AutoMinorVersionUpgrade:
    Description: Whether or not minor version upgrades to the cache engine and ActiveMQ should be applied automatically during the maintenance window.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  VPCStackName:
    Description: The VPC Cloudformation stack name
    Type: String
    Default: VPC-us-east-1

  ActiveMQName:
    Description: Custom name of the ActiveMQ Broker.
    Type: String
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  MQInstanceType:
    Description: ActiveMQ instance class, e.g. cache.t2.micro(free tier). See https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-instance-types.html
    Type: String
    Default: mq.m5.large
    ConstraintDescription: Node instance class not supported
    AllowedValues:
      - mq.t2.micro
      - mq.t3.micro
      - mq.m4.large
      - mq.m5.large
      - mq.m5.xlarge
      - mq.m5.2xlarge
      - mq.m5.4xlarge

  MQEngineVersion:
    Description: The version of the ActiveMQ engine, e.g. 5.15.15. See https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/activemq-version-management.html and update list below as needed.
    Type: String
    Default: 5.17.2
    ConstraintDescription: Node instance class not supported
    AllowedValues:
      - 5.17.6
      - 5.17.2
      - 5.16.3
      - 5.16.2
      - 5.15.15
      - 5.15.14
      - 5.15.13
      - 5.15.12
      - 5.15.10
      - 5.15.9
      - 5.15.8
      - 5.15.6
      - 5.15.0

Resources:
  MQUser:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "/mq/${AWS::StackName}"
      Description: The password for the ActiveMQ user (created by CFT)
      GenerateSecretString:
        SecretStringTemplate: '{"key": "ActiveMQUser"}'
        GenerateStringKey: "secret"
        IncludeSpace: false
        PasswordLength: 20
        ExcludeCharacters: '@,:='

  AMQConfiguration:
    Type: "AWS::AmazonMQ::Configuration"
    Properties:
      Data:
        ? "Fn::Base64"
        : |
          <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
          <broker schedulePeriodForDestinationPurge="10000" xmlns="http://activemq.apache.org/schema/core">
            <!--
            A configuration contains all of the settings for your ActiveMQ broker, in XML format (similar to ActiveMQ's activemq.xml file).
            You can create a configuration before creating any brokers. You can then apply the configuration to one or more brokers.

            You can use additional attributes for the broker element above. These attributes allow you to configure broker-wide settings.

            For more information, see Configuration and Amazon MQ Broker Configuration Parameters in the Amazon MQ Developer Guide:
            https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html
            -->
            <!--
            Mirrored queues let you send a copy of each message to a topic with a similar name automatically.
            For more information, see http://activemq.apache.org/mirrored-queues.html

            Virtual destinations let you configure advanced routing of messages between destinations.
            For more information, see http://activemq.apache.org/virtual-destinations.html
            -->
            <!--
            <destinationInterceptors>
              <mirroredQueue copyMessage="true" postfix=".qmirror" prefix=""/>
              <virtualDestinationInterceptor>
                <virtualDestinations>
                  <virtualTopic name="&gt;" prefix="VirtualTopicConsumers.*." selectorAware="false"/>
                  <compositeQueue name="MY.QUEUE">
                    <forwardTo>
                      <queue physicalName="FOO"/>
                      <topic physicalName="BAR"/>
                    </forwardTo>
                  </compositeQueue>
                </virtualDestinations>
              </virtualDestinationInterceptor>
            </destinationInterceptors>
            -->
            <!--
            By default, Amazon MQ optimizes for queues with fast consumers:
            Consumers are considered fast if they are able to keep up with the rate of messages generated by producers.
            Consumers are considered slow if a queue builds up a backlog of unacknowledged messages, potentially causing a decrease in producer throughput.
            To instruct Amazon MQ to optimize for queues with slow consumers, set the concurrentStoreAndDispatchQueues attribute to false.
            For more information, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/ensuring-effective-amazon-mq-performance.html
            -->
            <!--
            <persistenceAdapter>
              <kahaDB  concurrentStoreAndDispatchQueues="false"/>
            </persistenceAdapter>
            -->
            <destinationPolicy>
              <policyMap>
                <policyEntries>
                  <!--
                  gcInactiveDestinations is used to automatically purge inactive destinations
                  preventing them from unnecessarily using broker resources.

                  An 'inactive' destination is one that has no messages pending and no consumers connected.

                  For more information, see: http://activemq.apache.org/delete-inactive-destinations.html
                  -->
                  <policyEntry gcInactiveDestinations="true" inactiveTimoutBeforeGC="600000" topic="&gt;">
                    <!--
                    The constantPendingMessageLimitStrategy is used to prevent
                    slow topic conssumers to block producers and affect other consumers
                    by limiting the number of messages that are retained

                    For more information, see: http://activemq.apache.org/slow-consumer-handling.html
                    -->
                    <pendingMessageLimitStrategy>
                      <constantPendingMessageLimitStrategy limit="1000"/>
                    </pendingMessageLimitStrategy>
                  </policyEntry>
                  <!--
                  !!! NEXTWORLD CUSTOMIZATION !!!

                  Addition of `prioritizedMessages="true"` to the below default policy entry.

                  Enables priority support for messages submitted to all queues. See
                  https://dzone.com/articles/activemq-message-priorities for more info.
          
                  This is critical as it allows the Async Task Service to expedite tasks submitted from
                  interactive scenarios while those submitted from background scenarios will take a back
                  seat.
                  -->
                  <policyEntry gcInactiveDestinations="true" inactiveTimoutBeforeGC="600000" prioritizedMessages="true" queue="&gt;"/>
                  <!--
                  Destination policies let you configure a rich set of behaviors for your queues and topics.
                  For more information, see http://activemq.apache.org/per-destination-policies.html
                  -->
                  <!--
                  <policyEntry topic="FOO.&gt;">
                    <dispatchPolicy>
                      <roundRobinDispatchPolicy/>
                    </dispatchPolicy>
                    <subscriptionRecoveryPolicy>
                      <lastImageSubscriptionRecoveryPolicy/>
                    </subscriptionRecoveryPolicy>
                  </policyEntry>
                  <policyEntry advisoryForConsumed="true" tempTopic="true"/>
                  <policyEntry advisoryForConsumed="true" tempQueue="true"/>
                  -->
                </policyEntries>
              </policyMap>
            </destinationPolicy>
            <!--
            Typically, destinations are created automatically when they are used. Amazon MQ lets you create destinations when the broker is started.
            For more information, see http://activemq.apache.org/configure-startup-destinations.html
            -->
            <!--
            <destinations>
              <queue physicalName="FOO.BAR"/>
              <topic physicalName="SOME.TOPIC"/>
            </destinations>
            -->
            <!--
            You can control advanced ActiveMQ features using plugins.
            -->
            <plugins>
              <!--
              The Authorization plugin allows you to control the groups of users that are allowed to perform certain operations on your destinations.
              For more information, see http://activemq.apache.org/security.html
              -->
              <!--
              <authorizationPlugin>
                <map>
                  <authorizationMap>
                    <authorizationEntries>
                      <authorizationEntry admin="guests,users" queue="GUEST.&gt;" read="guests" write="guests,users"/>
                      <authorizationEntry admin="guests,users" read="guests,users" topic="ActiveMQ.Advisory.&gt;" write="guests,users"/>
                    </authorizationEntries>
                    <tempDestinationAuthorizationEntry>
                      <tempDestinationAuthorizationEntry admin="tempDestinationAdmins" read="tempDestinationAdmins" write="tempDestinationAdmins"/>
                    </tempDestinationAuthorizationEntry>
                  </authorizationMap>
                </map>
              </authorizationPlugin>
              -->
              <!--
              The Discarding DLQ plugin simplifies the configuration of your global dead-letter queue strategy.
              You can take advantage of a more granular per-destination control by using destination policies.
              For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
              -->
              <!--
              <discardingDLQBrokerPlugin dropAll="true" dropTemporaryQueues="true" dropTemporaryTopics="true"/>
              -->
              <!--
              The Force Persistency Mode plugin can override the persistency mode set on messages.
              -->
              <!--
              <forcePersistencyModeBrokerPlugin persistenceFlag="true"/>
              -->
              <!--
              The Redelivery plugin extends the capabilities of destination policies with respect to message redelivery.
              For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
              -->
              <!--
              <redeliveryPlugin fallbackToDeadLetter="true" sendToDlqIfMaxRetriesExceeded="true">
                <redeliveryPolicyMap>
                  <redeliveryPolicyMap>
                    <redeliveryPolicyEntries>
                      <redeliveryPolicy maximumRedeliveries="4" queue="SpecialQueue" redeliveryDelay="10000"/>
                    </redeliveryPolicyEntries>
                    <defaultEntry>
                      <redeliveryPolicy initialRedeliveryDelay="5000" maximumRedeliveries="4" redeliveryDelay="10000"/>
                    </defaultEntry>
                  </redeliveryPolicyMap>
                </redeliveryPolicyMap>
              </redeliveryPlugin>
              -->
              <!--
              The Statistics plugin lets you query broker or destination statistics by sending messages to the broker.
              For more information, see http://activemq.apache.org/statisticsplugin.html
              -->
              <!--
              !!! NEXTWORLD CUSTOMIZATION !!!
          
              Enables the StatisticsPlugin (https://activemq.apache.org/statisticsplugin)
              so that Nextworld Servers can inquire about the current health of various
              queues and adjust accordingly.
              -->
              <statisticsBrokerPlugin/>
              <!--
              The Timestamping plugin lets the broker use server-side time instead of client-provided time for messages.
              For more information, see http://activemq.apache.org/timestampplugin.html
              -->
              <!--
              <timeStampingBrokerPlugin ttlCeiling="86400000" zeroExpirationOverride="86400000"/>
              -->
            </plugins>
            <!--
            Network connectors let you connect brokers into networks of brokers.
            For more information, see Creating and Configuring an Amazon MQ Network of Brokers
            (https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-creating-configuring-network-of-brokers.html)
            in the Amazon MQ Developer Guide and also Networks of Brokers
            (http://activemq.apache.org/networks-of-brokers.html) in the ActiveMQ documentation.
            -->
            <!--
            <networkConnectors>
              <networkConnector name="myNetworkConnector" userName="commonUser" uri="masterslave:(ssl://b-1a2b3c4d-1.mq.region.amazonaws.com:61617,ssl://b-1a2b3c4d-2.mq.region.amazonaws.com:61617)"/>
            </networkConnectors>
            -->
          </broker>
      EngineType: ACTIVEMQ
      EngineVersion: !Ref MQEngineVersion
      Name: !Sub "${AWS::StackName}-TelestoConfig"

  ActiveMQSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ActiveMQ Security Group
      VpcId:
        Fn::ImportValue: !Sub "VPC-${VPCStackName}"
      SecurityGroupIngress:
        -
          Description: Allow CIDR block access (HTTP)
          CidrIp:
            Fn::ImportValue: !Sub "CIDR-${VPCStackName}"
          IpProtocol: tcp
          FromPort: 8162
          ToPort: 8162
        -
          Description: Allow CIDR block access (SSL)
          CidrIp:
            Fn::ImportValue: !Sub "CIDR-${VPCStackName}"
          IpProtocol: tcp
          FromPort: 61617
          ToPort: 61617
      Tags:
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-ActiveMQSecurityGroup"

  ConfigurationAssociation1:
    Type: AWS::AmazonMQ::ConfigurationAssociation
    Properties:
      Broker:
        Ref: ActiveMQ
      Configuration:
        Id:
          Ref: AMQConfiguration
        Revision:
          Fn::GetAtt:
            - AMQConfiguration
            - Revision

  ActiveMQ:
    Type: AWS::AmazonMQ::Broker
    Properties:
      AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
      BrokerName: !Ref ActiveMQName
      DeploymentMode: SINGLE_INSTANCE
      EncryptionOptions:
        UseAwsOwnedKey: true
      EngineType: ACTIVEMQ
      EngineVersion: !Ref MQEngineVersion
      HostInstanceType: !Ref MQInstanceType
      StorageType: EBS
      Logs:
        Audit: true
        General: true
      MaintenanceWindowStartTime:
        DayOfWeek: Sunday
        TimeOfDay: 08:00
        TimeZone: UTC
      PubliclyAccessible: false
      SecurityGroups:
        - !Ref ActiveMQSecurityGroup
      SubnetIds:
        - Fn::ImportValue: !Sub "PrivateSubnet2-${VPCStackName}"
      Users:
        -
          Username: !Join ['', ['{{resolve:secretsmanager:', !Ref MQUser, ':SecretString:key}}' ]]
          Password: !Join ['', ['{{resolve:secretsmanager:', !Ref MQUser, ':SecretString:secret}}' ]]
          ConsoleAccess: true